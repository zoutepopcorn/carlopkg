{"version":3,"sources":["app.js"],"names":[],"mappings":";AAIA,MAAA,EAAA,QAAA,SACA,EAAA,QAAA,QACA,EAAA,QAAA,MACA,EAAA,QAAA,WAEA,eAAA,IACA,IAAA,EACA,IACA,QAAA,EAAA,OACA,CACA,QAAA,OACA,MAAA,iBACA,KAAA,EACA,IAAA,EACA,MAAA,IACA,OAAA,IACA,QAAA,CAAA,SAAA,UACA,KAAA,EAAA,KAAA,UAAA,iBACA,KAAA,SAAA,QAAA,IAAA,IAAA,CAAA,iCAAA,GACA,aAAA,EAAA,KAAA,EAAA,UAAA,sBAEA,MAAA,GAGA,YADA,QAAA,IAAA,gCAWA,OAPA,EAAA,GAAA,OAAA,IAAA,QAAA,QACA,EAAA,GAAA,SAAA,GAAA,EAAA,KAAA,eACA,EAAA,YAAA,EAAA,KAAA,UAAA,cAEA,EAAA,eAAA,OAAA,SACA,EAAA,eAAA,QAAA,SACA,EAAA,KAAA,cACA,EAGA,MAAA,EAAA,IAEA,IAGA,EAAA,KACA,QAAA,IAAA,QACA,QAGA,IAAA,KAAA,KACA,QAAA,IAAA","file":"es6.map","sourceRoot":"","sourcesContent":["/* https://github.com/GoogleChromeLabs/carlo/blob/master/examples/systeminfo/app.js\n * Copyright 2018 Google Inc., PhantomJS Authors All rights reserved.\n * Licensed under the Apache License, Version 2.0\n */\nconst carlo = require('carlo');\nconst path = require('path');\nconst os = require('os');\nconst osName = require('os-name');\n\nasync function run() {\n    let app;\n    try {\n        app = await carlo.launch(\n            {\n                bgcolor: '#fff',\n                title: 'Systeminfo App',\n                left: 0,\n                top: 0,\n                width: 500,\n                height: 500,\n                channel: ['canary', 'stable'],\n                icon: path.join(__dirname, '/app_icon.png'),\n                args: process.env.DEV === 'true' ? ['--auto-open-devtools-for-tabs'] : [],\n                localDataDir: path.join(os.homedir(), '.carlosysteminfo'),\n            });\n    } catch (e) {\n        // New window is opened in the running instance.\n        console.log('Reusing the running instance');\n        return;\n    }\n\n    app.on('exit', () => process.exit());\n    app.on('window', window => window.load('index.html'));\n    app.serveFolder(path.join(__dirname, 'www'));\n\n    await app.exposeFunction('test', test);\n    await app.exposeFunction('getOs', getOs);\n    await app.load('index.html');\n    return app;\n}\n\nconst getOs = () => {\n    // osName(os.platform(), os.release());\n    return osName();\n}\n\nconst test = () => {\n    console.log(`test`)\n    return \"test\"\n}\n\nrun().then(() => {\n    console.log('THE END')\n})\n"]}